/**
 * Server-Side Configuration Loader
 * 
 * Purpose: Load Scout94 configuration for Node.js backend
 * Note: Cannot use UI's configManager (localStorage is browser-only)
 * 
 * Reads from: scout94-config.json in project root
 * Falls back to: Default values if file doesn't exist
 */

import { readFileSync, existsSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));
const CONFIG_PATH = join(__dirname, '..', 'scout94-config.json');

// Default configuration (matches UI defaults)
const DEFAULT_CONFIG = {
  version: '1.0.0',
  testEnvironment: {
    enabled: false,
    containerized: false,
    baseImage: 'php:8.2-apache',
    port: 8888,
    autoGenerateDB: false,
    schemaPath: '',
    dbType: 'mysql',
    dbPort: 13306,
    testDataRows: 100,
    resourceLimits: {
      memory: 512,
      cpuShares: 1024
    },
    autoCleanup: true,
    keepLogsOnFailure: true,
    networkIsolation: true
  }
};

class ServerConfigLoader {
  constructor() {
    this.config = this.loadConfig();
  }

  /**
   * Load configuration from file system
   */
  loadConfig() {
    try {
      if (existsSync(CONFIG_PATH)) {
        const content = readFileSync(CONFIG_PATH, 'utf-8');
        const parsed = JSON.parse(content);
        
        // Merge with defaults (in case new settings were added)
        return this.mergeWithDefaults(parsed);
      }
    } catch (error) {
      console.warn(`⚠️ Could not load config: ${error.message}`);
    }
    
    // Return defaults if file doesn't exist or is invalid
    return DEFAULT_CONFIG;
  }

  /**
   * Merge loaded config with defaults
   */
  mergeWithDefaults(loaded) {
    return {
      ...DEFAULT_CONFIG,
      ...loaded,
      testEnvironment: {
        ...DEFAULT_CONFIG.testEnvironment,
        ...(loaded.testEnvironment || {})
      }
    };
  }

  /**
   * Save configuration to disk
   */
  saveConfig(config) {
    try {
      writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2), 'utf-8');
      this.config = config;
      return true;
    } catch (error) {
      console.error(`❌ Could not save config: ${error.message}`);
      return false;
    }
  }

  /**
   * Get current configuration
   */
  getConfig() {
    return this.config;
  }

  /**
   * Get specific config value by path (e.g., 'testEnvironment.containerized')
   */
  get(path) {
    const keys = path.split('.');
    let value = this.config;
    
    for (const key of keys) {
      if (value && typeof value === 'object') {
        value = value[key];
      } else {
        return undefined;
      }
    }
    
    return value;
  }
}

export default new ServerConfigLoader();
