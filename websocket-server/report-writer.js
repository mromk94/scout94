/**
 * Report Writer
 * Handles writing agent summaries to designated regions in collaborative report
 */

import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { dirname } from 'path';

export class ReportWriter {
  constructor(lockManager) {
    this.lockManager = lockManager;
    
    // Region markers (HTML comments - invisible in rendered markdown)
    this.regionMarkers = {
      SCOUT94: {
        start: '<!-- REGION:SCOUT94 -->',
        end: '<!-- END:SCOUT94 -->'
      },
      CLINIC: {
        start: '<!-- REGION:CLINIC -->',
        end: '<!-- END:CLINIC -->'
      },
      AUDITOR: {
        start: '<!-- REGION:AUDITOR -->',
        end: '<!-- END:AUDITOR -->'
      }
    };
  }

  /**
   * Initialize report with region markers
   * @param {string} reportPath - Path to report file
   * @param {string} projectName - Project being tested
   * @returns {string} - Path to created report
   */
  initializeReport(reportPath, projectName) {
    const timestamp = new Date().toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const template = `# üß™ SCOUT94 - COLLABORATIVE ANALYSIS REPORT

**Project:** ${projectName}  
**Generated:** ${timestamp}  
**Status:** üîÑ IN PROGRESS

---

<!-- REGION:SCOUT94 -->
## üöÄ PHASE 1: FUNCTIONAL VALIDATION (Scout94)

*Awaiting scout94 functional test analysis...*

<!-- END:SCOUT94 -->

---

<!-- REGION:CLINIC -->
## üè• PHASE 2: CLINIC INTERVENTION (Doctor & Nurse)

*Clinic region - awaiting diagnosis and treatment...*

<!-- END:CLINIC -->

---

<!-- REGION:AUDITOR -->
## üìä PHASE 3: AUDIT VALIDATION (Auditor)

*Awaiting auditor LLM evaluation...*

<!-- END:AUDITOR -->

---

## üìù FINAL VERDICT

*Report will be finalized once all agents complete their analysis*

---

*Generated by Scout94 Multi-Agent Testing Framework*
`;

    // Ensure directory exists
    const dir = dirname(reportPath);
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
    }

    // Write initial report
    writeFileSync(reportPath, template, 'utf-8');
    console.log(`üìù Initialized collaborative report: ${reportPath}`);

    return reportPath;
  }

  /**
   * Append agent summary to their designated region
   * @param {string} reportPath - Path to report file
   * @param {string} region - Region name (SCOUT94, CLINIC, AUDITOR)
   * @param {string} agentId - Agent writing the summary
   * @param {string} summary - Markdown summary to append
   * @returns {Promise<void>}
   */
  async appendToRegion(reportPath, region, agentId, summary) {
    if (!this.regionMarkers[region]) {
      throw new Error(`Invalid region: ${region}. Must be SCOUT94, CLINIC, or AUDITOR`);
    }

    try {
      // Acquire lock (wait if needed)
      console.log(`üìù ${agentId} requesting lock to write to ${region} region...`);
      await this.lockManager.acquireLock(reportPath, agentId);

      // Read current report
      if (!existsSync(reportPath)) {
        throw new Error(`Report file not found: ${reportPath}`);
      }

      let content = readFileSync(reportPath, 'utf-8');

      // Find region boundaries
      const markers = this.regionMarkers[region];
      const startIdx = content.indexOf(markers.start);
      const endIdx = content.indexOf(markers.end);

      if (startIdx === -1 || endIdx === -1) {
        throw new Error(`Region markers not found for ${region}`);
      }

      // Extract current region content
      const beforeRegion = content.substring(0, startIdx + markers.start.length);
      const afterRegion = content.substring(endIdx);

      // Build new region content
      const newRegion = `\n\n${summary}\n\n`;

      // Reconstruct report
      const newContent = beforeRegion + newRegion + afterRegion;

      // Atomic write (temp file + rename)
      const tempPath = reportPath + '.tmp';
      writeFileSync(tempPath, newContent, 'utf-8');
      
      // Rename atomically (overwrite original)
      const fs = await import('fs');
      fs.renameSync(tempPath, reportPath);

      console.log(`‚úÖ ${agentId} successfully wrote to ${region} region`);

      // Check if all regions are complete
      this.checkReportCompletion(reportPath);

      return newContent;

    } catch (error) {
      console.error(`‚ùå Error writing to region ${region}:`, error);
      throw error;
    } finally {
      // Always release lock
      this.lockManager.releaseLock(reportPath, agentId);
    }
  }

  /**
   * Get current content of a region
   * @param {string} reportPath - Path to report file
   * @param {string} region - Region name
   * @returns {string} - Current region content
   */
  getRegionContent(reportPath, region) {
    if (!existsSync(reportPath)) {
      return null;
    }

    const content = readFileSync(reportPath, 'utf-8');
    const markers = this.regionMarkers[region];

    const startIdx = content.indexOf(markers.start);
    const endIdx = content.indexOf(markers.end);

    if (startIdx === -1 || endIdx === -1) {
      return null;
    }

    return content.substring(startIdx + markers.start.length, endIdx).trim();
  }

  /**
   * Check if all regions have been filled and update status
   * @param {string} reportPath - Path to report file
   */
  checkReportCompletion(reportPath) {
    const regions = ['SCOUT94', 'CLINIC', 'AUDITOR'];
    let allComplete = true;

    for (const region of regions) {
      const content = this.getRegionContent(reportPath, region);
      if (!content || content.includes('Awaiting') || content.includes('awaiting')) {
        allComplete = false;
        break;
      }
    }

    if (allComplete) {
      console.log('üéâ All regions complete! Updating report status...');
      
      // Update status in report
      let content = readFileSync(reportPath, 'utf-8');
      content = content.replace(
        '**Status:** üîÑ IN PROGRESS',
        '**Status:** ‚úÖ COMPLETE'
      );
      content = content.replace(
        '*Report will be finalized once all agents complete their analysis*',
        '**All agents have completed their analysis. Report is ready for review.**'
      );
      
      writeFileSync(reportPath, content, 'utf-8');
      console.log('‚úÖ Report status updated to COMPLETE');
    }
  }

  /**
   * Replace entire region content (for re-writes)
   * @param {string} reportPath - Path to report file
   * @param {string} region - Region name
   * @param {string} agentId - Agent writing
   * @param {string} newContent - New content to replace with
   * @returns {Promise<void>}
   */
  async replaceRegion(reportPath, region, agentId, newContent) {
    // Same as appendToRegion but replaces instead of appends
    return this.appendToRegion(reportPath, region, agentId, newContent);
  }
}

export default ReportWriter;
