/**
 * TestEnvironmentSettings - Section 12 of admin settings
 * 
 * Phase 2: Containerized Testing Configuration
 * Per: SCOUT94_MASTER_IMPROVEMENT_PLAN.md Phase 2
 * 
 * Allows users to configure:
 * - Docker container settings
 * - Test database configuration
 * - Schema file path
 * - Test data generation options
 */

import PropTypes from 'prop-types';
import SettingToggle from '../SettingToggle';
import SettingSlider from '../SettingSlider';
import SettingDropdown from '../SettingDropdown';
import SettingInput from '../SettingInput';

function TestEnvironmentSettings({ config, onChange }) {
  const testEnv = config.testEnvironment || {
    enabled: false,
    containerized: false,
    baseImage: 'php:8.2-apache',
    port: 8888,
    autoGenerateDB: false,
    schemaPath: '',
    dbType: 'mysql',
    dbPort: 13306,
    testDataRows: 100,
    resourceLimits: {
      memory: 512,
      cpuShares: 1024
    },
    autoCleanup: true,
    keepLogsOnFailure: true
  };

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-bold text-white mb-1">
          Test Environment Configuration
        </h3>
        <p className="text-sm text-gray-400">
          Configure isolated Docker containers for comprehensive testing with auto-generated test databases
        </p>
      </div>

      {/* Enable Containerized Testing */}
      <div className="bg-gradient-to-br from-blue-900/20 to-purple-900/20 rounded-xl p-5 border-2 border-blue-700/50">
        <div className="flex items-center justify-between mb-4">
          <h4 className="text-sm font-bold text-white uppercase tracking-wide text-blue-400">
            Containerized Testing
            <span className="text-xs text-gray-400 ml-2 font-normal">
              üê≥ Docker Required
            </span>
          </h4>
        </div>

        <div className="space-y-4">
          <SettingToggle
            label="Enable Containerized Testing"
            value={testEnv.containerized}
            onChange={(val) => onChange('testEnvironment.containerized', val)}
            helpText="Run tests in isolated Docker containers with auto-generated test databases"
            ariaLabel="Enable containerized testing mode"
          />

          {testEnv.containerized && (
            <>
              <SettingDropdown
                label="Base Container Image"
                value={testEnv.baseImage}
                onChange={(val) => onChange('testEnvironment.baseImage', val)}
                options={[
                  { value: 'php:8.2-apache', label: 'PHP 8.2 + Apache' },
                  { value: 'php:8.1-apache', label: 'PHP 8.1 + Apache' },
                  { value: 'php:8.0-apache', label: 'PHP 8.0 + Apache' },
                  { value: 'node:20', label: 'Node.js 20 LTS' },
                  { value: 'node:18', label: 'Node.js 18 LTS' },
                  { value: 'python:3.11', label: 'Python 3.11' },
                  { value: 'python:3.10', label: 'Python 3.10' }
                ]}
                helpText="Choose the runtime environment for your application"
                ariaLabel="Select base container image"
              />

              <SettingInput
                label="Test Container Port"
                value={testEnv.port}
                onChange={(val) => onChange('testEnvironment.port', parseInt(val))}
                type="number"
                min={8000}
                max={9999}
                helpText="Port to expose the test environment on localhost"
                ariaLabel="Test container port number"
              />

              <div className="p-3 bg-blue-900/30 border border-blue-700/50 rounded-lg text-xs text-blue-300">
                ‚ÑπÔ∏è <strong>Note:</strong> Docker must be installed and running. Scout94 will create isolated containers for each test run.
              </div>
            </>
          )}
        </div>
      </div>

      {/* Database Configuration */}
      {testEnv.containerized && (
        <div className="bg-gradient-to-br from-green-900/20 to-teal-900/20 rounded-xl p-5 border-2 border-green-700/50">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-sm font-bold text-white uppercase tracking-wide text-green-400">
              Test Database
              <span className="text-xs text-gray-400 ml-2 font-normal">
                Auto-Generated from Schema
              </span>
            </h4>
          </div>

          <div className="space-y-4">
            <SettingToggle
              label="Auto-Generate Test Database"
              value={testEnv.autoGenerateDB}
              onChange={(val) => onChange('testEnvironment.autoGenerateDB', val)}
              helpText="Automatically create and populate a test database from your schema file"
              ariaLabel="Enable automatic test database generation"
            />

            {testEnv.autoGenerateDB && (
              <>
                <SettingInput
                  label="Database Schema Path"
                  value={testEnv.schemaPath}
                  onChange={(val) => onChange('testEnvironment.schemaPath', val)}
                  placeholder="/path/to/schema.sql"
                  helpText="Path to your database schema file (SQL, migrations, etc.)"
                  ariaLabel="Database schema file path"
                />

                <SettingDropdown
                  label="Database Type"
                  value={testEnv.dbType}
                  onChange={(val) => onChange('testEnvironment.dbType', val)}
                  options={[
                    { value: 'mysql', label: 'MySQL 8.0' },
                    { value: 'postgres', label: 'PostgreSQL 15' },
                    { value: 'mongodb', label: 'MongoDB 7' },
                    { value: 'sqlite', label: 'SQLite (In-Memory)' }
                  ]}
                  helpText="Select your database system"
                  ariaLabel="Database type selection"
                />

                <SettingInput
                  label="Database Container Port"
                  value={testEnv.dbPort}
                  onChange={(val) => onChange('testEnvironment.dbPort', parseInt(val))}
                  type="number"
                  min={10000}
                  max={20000}
                  helpText="Port to expose the database on localhost (e.g., 13306 for MySQL)"
                  ariaLabel="Database container port"
                />

                <SettingSlider
                  label="Test Data Rows per Table"
                  value={testEnv.testDataRows}
                  onChange={(val) => onChange('testEnvironment.testDataRows', val)}
                  min={10}
                  max={1000}
                  step={10}
                  helpText="Number of realistic test records to generate for each table"
                  ariaLabel="Test data rows per table"
                />

                <div className="p-3 bg-green-900/30 border border-green-700/50 rounded-lg text-xs text-green-300">
                  ‚ú® <strong>Intelligent Data:</strong> Scout94 uses Faker.js to generate realistic data based on column names (emails, phones, addresses, etc.)
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {/* Resource Limits */}
      {testEnv.containerized && (
        <div className="bg-gradient-to-br from-orange-900/20 to-red-900/20 rounded-xl p-5 border-2 border-orange-700/50">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-sm font-bold text-white uppercase tracking-wide text-orange-400">
              Resource Limits
              <span className="text-xs text-gray-400 ml-2 font-normal">
                Container Performance
              </span>
            </h4>
          </div>

          <div className="space-y-4">
            <SettingSlider
              label="Memory Limit (MB)"
              value={testEnv.resourceLimits?.memory || 512}
              onChange={(val) => onChange('testEnvironment.resourceLimits.memory', val)}
              min={256}
              max={2048}
              step={256}
              helpText="Maximum memory allocation per container"
              ariaLabel="Container memory limit in megabytes"
            />

            <SettingSlider
              label="CPU Shares"
              value={testEnv.resourceLimits?.cpuShares || 1024}
              onChange={(val) => onChange('testEnvironment.resourceLimits.cpuShares', val)}
              min={512}
              max={2048}
              step={256}
              helpText="CPU priority for containers (1024 = normal)"
              ariaLabel="Container CPU shares"
            />

            <div className="p-3 bg-orange-900/30 border border-orange-700/50 rounded-lg text-xs text-orange-300">
              ‚ö° <strong>Recommended:</strong> 512MB memory and 1024 CPU shares for most projects. Increase for large applications.
            </div>
          </div>
        </div>
      )}

      {/* Cleanup Options */}
      {testEnv.containerized && (
        <div className="bg-gradient-to-br from-gray-800/50 to-gray-900/50 rounded-xl p-5 border-2 border-gray-700/50">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-sm font-bold text-white uppercase tracking-wide text-gray-400">
              Cleanup & Logging
            </h4>
          </div>

          <div className="space-y-4">
            <SettingToggle
              label="Auto-Cleanup Containers"
              value={testEnv.autoCleanup !== false}
              onChange={(val) => onChange('testEnvironment.autoCleanup', val)}
              helpText="Automatically remove containers after test completion"
              ariaLabel="Enable automatic container cleanup"
            />

            <SettingToggle
              label="Keep Logs on Failure"
              value={testEnv.keepLogsOnFailure !== false}
              onChange={(val) => onChange('testEnvironment.keepLogsOnFailure', val)}
              helpText="Preserve container logs when tests fail for debugging"
              ariaLabel="Keep container logs when tests fail"
            />
          </div>
        </div>
      )}

      {/* Status & Requirements */}
      <div className="bg-gray-800/50 rounded-xl p-5 border border-gray-700">
        <h4 className="text-sm font-bold text-white mb-3">System Requirements</h4>
        
        <div className="space-y-2 text-sm">
          <div className="flex items-center gap-2">
            <span className="text-gray-400">üê≥ Docker:</span>
            <span className="text-white">Required for containerized testing</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-gray-400">üíæ Disk Space:</span>
            <span className="text-white">~2GB for images and containers</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-gray-400">üß† RAM:</span>
            <span className="text-white">Minimum 4GB (8GB recommended)</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-gray-400">‚öôÔ∏è CPU:</span>
            <span className="text-white">Multi-core recommended</span>
          </div>
        </div>

        {!testEnv.containerized && (
          <div className="mt-4 p-3 bg-blue-900/30 border border-blue-700/50 rounded-lg text-xs text-blue-300">
            üí° <strong>Tip:</strong> Enable containerized testing to run comprehensive tests in isolated environments with auto-generated test databases!
          </div>
        )}
      </div>
    </div>
  );
}

TestEnvironmentSettings.propTypes = {
  config: PropTypes.shape({
    testEnvironment: PropTypes.shape({
      enabled: PropTypes.bool,
      containerized: PropTypes.bool,
      baseImage: PropTypes.string,
      port: PropTypes.number,
      autoGenerateDB: PropTypes.bool,
      schemaPath: PropTypes.string,
      dbType: PropTypes.string,
      dbPort: PropTypes.number,
      testDataRows: PropTypes.number,
      resourceLimits: PropTypes.shape({
        memory: PropTypes.number,
        cpuShares: PropTypes.number
      }),
      autoCleanup: PropTypes.bool,
      keepLogsOnFailure: PropTypes.bool
    })
  }).isRequired,
  onChange: PropTypes.func.isRequired
};

export default TestEnvironmentSettings;
