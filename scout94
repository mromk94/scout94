#!/usr/bin/env php
<?php
/**
 * Scout94 CLI Manager
 * Comprehensive start/pause/stop/restart script
 * Can be called from any directory
 * 
 * Usage:
 *   scout94 start [path] [--mode=audit|clinic|basic]
 *   scout94 stop
 *   scout94 pause
 *   scout94 resume
 *   scout94 restart [path]
 *   scout94 status
 *   scout94 logs [--tail=N]
 *   scout94 report
 */

// Get Scout94 installation directory
$SCOUT94_DIR = dirname(__FILE__);
$PID_FILE = $SCOUT94_DIR . '/.scout94.pid';
$STATE_FILE = $SCOUT94_DIR . '/.scout94.state';
$LOG_FILE = $SCOUT94_DIR . '/.scout94.log';

// ANSI Colors
define('GREEN', "\033[0;32m");
define('YELLOW', "\033[1;33m");
define('RED', "\033[0;31m");
define('BLUE', "\033[0;34m");
define('RESET', "\033[0m");
define('BOLD', "\033[1m");

/**
 * Print colored output
 */
function printColor($message, $color = RESET) {
    echo $color . $message . RESET . "\n";
}

/**
 * Print header
 */
function printHeader($title) {
    echo "\n";
    printColor("╔═══════════════════════════════════════╗", BLUE);
    printColor("║  " . str_pad($title, 37) . "║", BLUE);
    printColor("╚═══════════════════════════════════════╝", BLUE);
    echo "\n";
}

/**
 * Get current working directory where scout94 was called
 */
function getTargetPath($args) {
    // Filter out flags first
    $paths = [];
    for ($i = 2; $i < count($args); $i++) {
        if (strpos($args[$i], '--') !== 0) {
            $paths[] = $args[$i];
        }
    }
    
    // Check if path provided as argument
    if (!empty($paths)) {
        $path = $paths[0];
        return realpath($path) ?: $path;
    }
    
    // Use current working directory
    return getcwd();
}

/**
 * Get mode from arguments
 */
function getMode($args) {
    foreach ($args as $arg) {
        if (strpos($arg, '--mode=') === 0) {
            $mode = substr($arg, 7);
            if (in_array($mode, ['audit', 'clinic', 'basic', 'auto', 'visual'])) {
                return $mode;
            }
        }
    }
    return 'audit'; // Default
}

/**
 * Check if Scout94 is running
 */
function isRunning($pidFile) {
    if (!file_exists($pidFile)) {
        return false;
    }
    
    $pid = trim(file_get_contents($pidFile));
    
    // Check if process exists
    $result = shell_exec("ps -p $pid");
    return strpos($result, $pid) !== false;
}

/**
 * Get current state
 */
function getState($stateFile) {
    if (!file_exists($stateFile)) {
        return null;
    }
    
    $state = json_decode(file_get_contents($stateFile), true);
    return $state;
}

/**
 * Save state
 */
function saveState($stateFile, $data) {
    file_put_contents($stateFile, json_encode($data, JSON_PRETTY_PRINT));
}

/**
 * Start Scout94
 */
function startScout94($scout94Dir, $pidFile, $stateFile, $logFile, $targetPath, $mode) {
    printHeader("SCOUT94 START");
    
    // Check if already running
    if (isRunning($pidFile)) {
        printColor("⚠️  Scout94 is already running!", YELLOW);
        printColor("   Use 'scout94 status' to check or 'scout94 stop' to stop it.", YELLOW);
        return 1;
    }
    
    printColor("🚀 Starting Scout94...", GREEN);
    printColor("   Target: $targetPath", BLUE);
    printColor("   Mode: $mode", BLUE);
    
    // Determine runner script
    $runner = match($mode) {
        'clinic' => 'run_with_clinic.php',
        'basic' => 'run_all_tests.php',
        'auto' => 'run_with_auto_escalate.php',
        'visual' => 'run_with_visual.php',
        default => 'run_with_audit.php'
    };
    
    $runnerPath = $scout94Dir . '/' . $runner;
    
    if (!file_exists($runnerPath)) {
        printColor("❌ Runner not found: $runner", RED);
        return 1;
    }
    
    // Start in background
    $command = "php \"$runnerPath\" \"$targetPath\" > \"$logFile\" 2>&1 & echo $!";
    $pid = trim(shell_exec($command));
    
    if (empty($pid)) {
        printColor("❌ Failed to start Scout94", RED);
        return 1;
    }
    
    // Save PID and state
    file_put_contents($pidFile, $pid);
    saveState($stateFile, [
        'pid' => $pid,
        'target' => $targetPath,
        'mode' => $mode,
        'started_at' => date('Y-m-d H:i:s'),
        'status' => 'running',
        'called_from' => getcwd()
    ]);
    
    printColor("✅ Scout94 started successfully!", GREEN);
    printColor("   PID: $pid", BLUE);
    printColor("   Log: $logFile", BLUE);
    echo "\n";
    printColor("💡 Use 'scout94 status' to check progress", YELLOW);
    printColor("💡 Use 'scout94 logs' to view output", YELLOW);
    printColor("💡 Use 'scout94 stop' to stop execution", YELLOW);
    
    return 0;
}

/**
 * Stop Scout94
 */
function stopScout94($pidFile, $stateFile) {
    printHeader("SCOUT94 STOP");
    
    if (!isRunning($pidFile)) {
        printColor("⚠️  Scout94 is not running", YELLOW);
        
        // Clean up stale files
        if (file_exists($pidFile)) unlink($pidFile);
        if (file_exists($stateFile)) unlink($stateFile);
        
        return 1;
    }
    
    $pid = trim(file_get_contents($pidFile));
    $state = getState($stateFile);
    
    printColor("🛑 Stopping Scout94...", YELLOW);
    printColor("   PID: $pid", BLUE);
    
    // Kill process
    shell_exec("kill $pid");
    sleep(1);
    
    // Force kill if still running
    if (isRunning($pidFile)) {
        shell_exec("kill -9 $pid");
        printColor("   Force killed", YELLOW);
    }
    
    // Clean up
    if (file_exists($pidFile)) unlink($pidFile);
    if ($state) {
        $state['status'] = 'stopped';
        $state['stopped_at'] = date('Y-m-d H:i:s');
        saveState($stateFile, $state);
    }
    
    printColor("✅ Scout94 stopped", GREEN);
    
    return 0;
}

/**
 * Pause Scout94
 */
function pauseScout94($pidFile, $stateFile) {
    printHeader("SCOUT94 PAUSE");
    
    if (!isRunning($pidFile)) {
        printColor("⚠️  Scout94 is not running", YELLOW);
        return 1;
    }
    
    $pid = trim(file_get_contents($pidFile));
    
    printColor("⏸️  Pausing Scout94...", YELLOW);
    printColor("   PID: $pid", BLUE);
    
    // Send STOP signal (pause)
    shell_exec("kill -STOP $pid");
    
    $state = getState($stateFile);
    if ($state) {
        $state['status'] = 'paused';
        $state['paused_at'] = date('Y-m-d H:i:s');
        saveState($stateFile, $state);
    }
    
    printColor("✅ Scout94 paused", GREEN);
    printColor("💡 Use 'scout94 resume' to continue", YELLOW);
    
    return 0;
}

/**
 * Resume Scout94
 */
function resumeScout94($pidFile, $stateFile) {
    printHeader("SCOUT94 RESUME");
    
    if (!isRunning($pidFile)) {
        printColor("⚠️  Scout94 is not running", YELLOW);
        return 1;
    }
    
    $pid = trim(file_get_contents($pidFile));
    $state = getState($stateFile);
    
    if ($state && $state['status'] !== 'paused') {
        printColor("⚠️  Scout94 is not paused", YELLOW);
        return 1;
    }
    
    printColor("▶️  Resuming Scout94...", GREEN);
    printColor("   PID: $pid", BLUE);
    
    // Send CONT signal (resume)
    shell_exec("kill -CONT $pid");
    
    if ($state) {
        $state['status'] = 'running';
        $state['resumed_at'] = date('Y-m-d H:i:s');
        saveState($stateFile, $state);
    }
    
    printColor("✅ Scout94 resumed", GREEN);
    
    return 0;
}

/**
 * Restart Scout94
 */
function restartScout94($scout94Dir, $pidFile, $stateFile, $logFile, $targetPath, $mode) {
    printHeader("SCOUT94 RESTART");
    
    // Stop if running
    if (isRunning($pidFile)) {
        printColor("🛑 Stopping current instance...", YELLOW);
        stopScout94($pidFile, $stateFile);
        sleep(1);
    }
    
    // Start new instance
    return startScout94($scout94Dir, $pidFile, $stateFile, $logFile, $targetPath, $mode);
}

/**
 * Show status
 */
function showStatus($pidFile, $stateFile, $logFile) {
    printHeader("SCOUT94 STATUS");
    
    $running = isRunning($pidFile);
    $state = getState($stateFile);
    
    if (!$running && !$state) {
        printColor("Status: " . YELLOW . "Not running" . RESET, RESET);
        printColor("\n💡 Use 'scout94 start [path]' to begin", YELLOW);
        return 1;
    }
    
    if (!$running && $state) {
        printColor("Status: " . RED . "Stopped" . RESET, RESET);
        if (isset($state['stopped_at'])) {
            printColor("Stopped at: {$state['stopped_at']}", BLUE);
        }
        printColor("\n💡 Use 'scout94 start' to restart", YELLOW);
        return 1;
    }
    
    // Running
    $statusColor = match($state['status'] ?? 'running') {
        'paused' => YELLOW,
        'running' => GREEN,
        default => BLUE
    };
    
    printColor("Status: " . $statusColor . ucfirst($state['status'] ?? 'running') . RESET, RESET);
    printColor("PID: {$state['pid']}", BLUE);
    printColor("Target: {$state['target']}", BLUE);
    printColor("Mode: {$state['mode']}", BLUE);
    printColor("Started: {$state['started_at']}", BLUE);
    printColor("Called from: {$state['called_from']}", BLUE);
    
    if (isset($state['paused_at'])) {
        printColor("Paused at: {$state['paused_at']}", YELLOW);
    }
    
    // Calculate runtime
    $start = strtotime($state['started_at']);
    $now = time();
    $runtime = $now - $start;
    $minutes = floor($runtime / 60);
    $seconds = $runtime % 60;
    
    printColor("\nRuntime: {$minutes}m {$seconds}s", GREEN);
    
    // Show last log lines
    if (file_exists($logFile)) {
        printColor("\n📊 Last 5 log lines:", BOLD);
        $lines = array_slice(file($logFile), -5);
        foreach ($lines as $line) {
            echo "   " . trim($line) . "\n";
        }
    }
    
    printColor("\n💡 Use 'scout94 logs' for full output", YELLOW);
    
    return 0;
}

/**
 * Show logs
 */
function showLogs($logFile, $tail = null) {
    printHeader("SCOUT94 LOGS");
    
    if (!file_exists($logFile)) {
        printColor("⚠️  No log file found", YELLOW);
        printColor("   Scout94 may not have been started yet", YELLOW);
        return 1;
    }
    
    if ($tail) {
        printColor("📊 Last $tail lines:", BOLD);
        $lines = array_slice(file($logFile), -$tail);
        foreach ($lines as $line) {
            echo trim($line) . "\n";
        }
    } else {
        printColor("📊 Full log output:", BOLD);
        echo file_get_contents($logFile);
    }
    
    return 0;
}

/**
 * Show report
 */
function showReport($stateFile) {
    printHeader("SCOUT94 REPORT");
    
    $state = getState($stateFile);
    
    if (!$state) {
        printColor("⚠️  No state found", YELLOW);
        return 1;
    }
    
    $targetPath = $state['target'];
    
    // Look for report files
    $reports = [
        'SCOUT94_AUDITED_REPORT.md',
        'SCOUT94_AUDIT_FAILED.md',
        'SCOUT94_HEALED_REPORT.md',
        'SCOUT94_CLINIC_FAILED.md'
    ];
    
    $found = false;
    foreach ($reports as $report) {
        $reportPath = $targetPath . '/' . $report;
        if (file_exists($reportPath)) {
            printColor("✅ Found: $report", GREEN);
            printColor("   Location: $reportPath", BLUE);
            $found = true;
        }
    }
    
    if (!$found) {
        printColor("⚠️  No reports found yet", YELLOW);
        printColor("   Scout94 may still be running", YELLOW);
        printColor("   Use 'scout94 status' to check", YELLOW);
    }
    
    return $found ? 0 : 1;
}

/**
 * Show help
 */
function showHelp($scout94Dir) {
    printHeader("SCOUT94 CLI MANAGER");
    
    echo BOLD . "USAGE:" . RESET . "\n";
    echo "  scout94 <command> [options]\n\n";
    
    echo BOLD . "COMMANDS:" . RESET . "\n";
    echo GREEN . "  start [path]" . RESET . "          Start Scout94\n";
    echo "                            Path: Target project (default: current dir)\n";
    echo "                            Options: --mode=audit|clinic|basic\n";
    echo GREEN . "  stop" . RESET . "                  Stop Scout94\n";
    echo GREEN . "  pause" . RESET . "                 Pause execution\n";
    echo GREEN . "  resume" . RESET . "                Resume execution\n";
    echo GREEN . "  restart [path]" . RESET . "        Restart Scout94\n";
    echo GREEN . "  status" . RESET . "                Show current status\n";
    echo GREEN . "  logs [--tail=N]" . RESET . "       Show logs (optionally last N lines)\n";
    echo GREEN . "  report" . RESET . "                Show report location\n";
    echo GREEN . "  help" . RESET . "                  Show this help\n";
    
    echo "\n" . BOLD . "MODES:" . RESET . "\n";
    echo BLUE . "  auto" . RESET . "    - Auto-escalate: Audit → Clinic (RECOMMENDED)\n";
    echo BLUE . "  visual" . RESET . "  - Visual testing with AI analysis (~\$0.10)\n";
    echo BLUE . "  audit" . RESET . "   - Run with LLM auditor + auto-retry\n";
    echo BLUE . "  clinic" . RESET . "  - Self-healing mode with clinic\n";
    echo BLUE . "  basic" . RESET . "   - Run tests without auditor\n";
    
    echo "\n" . BOLD . "EXAMPLES:" . RESET . "\n";
    echo "  scout94 start --mode=auto                  # Auto-escalate (recommended)\n";
    echo "  scout94 start                              # Start in current directory\n";
    echo "  scout94 start /path/to/project             # Start with specific path\n";
    echo "  scout94 start --mode=clinic                # Start in clinic mode\n";
    echo "  scout94 start ../myproject --mode=audit    # Path + mode\n";
    echo "  scout94 status                             # Check status\n";
    echo "  scout94 logs --tail=20                     # View last 20 lines\n";
    echo "  scout94 stop                               # Stop execution\n";
    
    echo "\n" . BOLD . "NOTES:" . RESET . "\n";
    echo "  • Can be called from ANY directory\n";
    echo "  • Runs in background (daemon mode)\n";
    echo "  • Logs stored in: $scout94Dir/.scout94.log\n";
    echo "  • Use SSH-friendly (no TTY required)\n";
    echo "  • CI/CD compatible\n";
    
    echo "\n";
}

// ============================================
// MAIN EXECUTION
// ============================================

$command = $argv[1] ?? 'help';

switch ($command) {
    case 'start':
        $targetPath = getTargetPath($argv);
        $mode = getMode($argv);
        exit(startScout94($SCOUT94_DIR, $PID_FILE, $STATE_FILE, $LOG_FILE, $targetPath, $mode));
        
    case 'stop':
        exit(stopScout94($PID_FILE, $STATE_FILE));
        
    case 'pause':
        exit(pauseScout94($PID_FILE, $STATE_FILE));
        
    case 'resume':
        exit(resumeScout94($PID_FILE, $STATE_FILE));
        
    case 'restart':
        $targetPath = getTargetPath($argv);
        $mode = getMode($argv);
        exit(restartScout94($SCOUT94_DIR, $PID_FILE, $STATE_FILE, $LOG_FILE, $targetPath, $mode));
        
    case 'status':
        exit(showStatus($PID_FILE, $STATE_FILE, $LOG_FILE));
        
    case 'logs':
        $tail = null;
        foreach ($argv as $arg) {
            if (strpos($arg, '--tail=') === 0) {
                $tail = (int)substr($arg, 7);
            }
        }
        exit(showLogs($LOG_FILE, $tail));
        
    case 'report':
        exit(showReport($STATE_FILE));
        
    case 'help':
    case '--help':
    case '-h':
        showHelp($SCOUT94_DIR);
        exit(0);
        
    default:
        printColor("❌ Unknown command: $command", RED);
        printColor("💡 Use 'scout94 help' for usage", YELLOW);
        exit(1);
}
