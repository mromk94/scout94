<?php
/**
 * Report Helper Functions
 * Used by PHP agents to write to collaborative report
 */

/**
 * Write agent summary to collaborative report
 * 
 * @param string $reportPath Path to report file
 * @param string $region Region name (SCOUT94, CLINIC, AUDITOR)
 * @param string $agentId Agent writing the summary
 * @param string $summary Markdown summary to write
 */
function writeAgentSummary($reportPath, $region, $agentId, $summary) {
    // Signal WebSocket to write to report
    echo "REPORT_WRITE:" . json_encode([
        'reportPath' => $reportPath,
        'region' => $region,
        'agentId' => $agentId,
        'summary' => $summary
    ]) . "\n";
    
    // CRITICAL: Flush output buffer immediately so WebSocket receives signal
    if (ob_get_level() > 0) {
        ob_flush();
    }
    flush();
    
    // Delay to allow lock acquisition and write completion
    usleep(800000); // 0.8 seconds (increased for reliability)
}

/**
 * Initialize collaborative report
 * 
 * @param string $reportPath Path where report will be created
 * @param string $projectName Name of project being tested
 * @return string Path to created report
 */
function initializeCollaborativeReport($reportPath, $projectName) {
    $timestamp = date('F j, Y g:i A');
    
    $template = <<<MARKDOWN
# üß™ SCOUT94 - COLLABORATIVE ANALYSIS REPORT

**Project:** $projectName  
**Generated:** $timestamp  
**Status:** üîÑ IN PROGRESS

---

<!-- REGION:SCOUT94 -->
## üöÄ PHASE 1: FUNCTIONAL VALIDATION (Scout94)

*Awaiting scout94 functional test analysis...*

<!-- END:SCOUT94 -->

---

<!-- REGION:CLINIC -->
## üè• PHASE 2: CLINIC INTERVENTION (Doctor & Nurse)

*Clinic region - awaiting diagnosis and treatment...*

<!-- END:CLINIC -->

---

<!-- REGION:AUDITOR -->
## üìä PHASE 3: AUDIT VALIDATION (Auditor)

*Awaiting auditor LLM evaluation...*

<!-- END:AUDITOR -->

---

## üìù FINAL VERDICT

*Report will be finalized once all agents complete their analysis*

---

*Generated by Scout94 Multi-Agent Testing Framework*

MARKDOWN;

    // Ensure directory exists
    $dir = dirname($reportPath);
    if (!file_exists($dir)) {
        mkdir($dir, 0755, true);
    }
    
    file_put_contents($reportPath, $template);
    echo "üìù Initialized collaborative report: $reportPath\n";
    
    return $reportPath;
}

/**
 * Generate Scout94 functional test summary
 * 
 * @param array $testResults Test results array
 * @param int $attempt Current attempt number
 * @return string Markdown summary
 */
function generateScout94Summary($testResults, $attempt = 1) {
    $timestamp = date('g:i A');
    $duration = isset($testResults['duration']) ? $testResults['duration'] : 'N/A';
    
    $summary = "### üöÄ Scout94 Functional Analysis\n\n";
    $summary .= "**Test Execution:** Run #$attempt  \n";
    $summary .= "**Timestamp:** $timestamp  \n";
    $summary .= "**Duration:** $duration  \n\n";
    
    $summary .= "#### Test Results Summary\n\n";
    $summary .= "| Test Suite | Status | Details |\n";
    $summary .= "|------------|--------|---------|";
    
    foreach ($testResults['suites'] as $suite) {
        $status = $suite['passed'] ? '‚úÖ PASS' : '‚ùå FAIL';
        $details = $suite['details'] ?? '-';
        $summary .= "\n| {$suite['name']} | $status | $details |";
    }
    
    $summary .= "\n\n#### Key Findings\n\n";
    
    if (isset($testResults['findings']) && is_array($testResults['findings'])) {
        foreach ($testResults['findings'] as $finding) {
            $icon = strpos($finding, 'warning') !== false ? '‚ö†Ô∏è' : '‚úÖ';
            $summary .= "- $icon $finding\n";
        }
    }
    
    $totalTests = $testResults['total'] ?? 0;
    $passed = $testResults['passed'] ?? 0;
    $failed = $testResults['failed'] ?? 0;
    
    $summary .= "\n**Overall:** $passed/$totalTests tests passed";
    if ($failed > 0) {
        $summary .= " ($failed failed)";
    }
    $summary .= "\n\n**Next Step:** Escalating to Auditor for quality validation...\n";
    
    return $summary;
}

/**
 * Generate Clinic intervention summary
 * 
 * @param array $admission Admission data from clinic
 * @param array $treatment Treatment results
 * @return string Markdown summary
 */
function generateClinicSummary($admission, $treatment) {
    $summary = "### üè• Clinic Intervention\n\n";
    
    // Doctor's Diagnosis
    $summary .= "#### ü©∫ Doctor's Diagnosis\n\n";
    $summary .= "**Health Assessment:** {$admission['initial_health']}/100 ({$admission['health_status']})  \n";
    $summary .= "**Primary Issues:**\n";
    
    if (isset($admission['diagnosis']) && is_array($admission['diagnosis'])) {
        $priority = 1;
        foreach ($admission['diagnosis'] as $issue) {
            $summary .= "$priority. **{$issue['severity']}** - {$issue['description']}\n";
            $priority++;
        }
    }
    
    $summary .= "\n**Treatment Plan:**\n";
    if (isset($admission['prescriptions']) && is_array($admission['prescriptions'])) {
        foreach ($admission['prescriptions'] as $prescription) {
            $gain = $prescription['health_gain'] ?? 0;
            $summary .= "- {$prescription['type']} (Priority {$prescription['priority']}, +$gain health)\n";
        }
    }
    
    // Nurse's Treatment Log
    $summary .= "\n---\n\n";
    $summary .= "#### üíâ Nurse's Treatment Log\n\n";
    $summary .= "**Treatments Applied:** {$treatment['applied_count']}/{$treatment['total_count']}  \n";
    $summary .= "**Health Progression:** {$admission['initial_health']} ‚Üí {$treatment['final_health']} ";
    $healthGain = $treatment['final_health'] - $admission['initial_health'];
    $summary .= "(+" . $healthGain . ")\n\n";
    
    if (isset($treatment['treatments']) && is_array($treatment['treatments'])) {
        $treatmentNum = 1;
        foreach ($treatment['treatments'] as $t) {
            $status = $t['success'] ? '‚úÖ SUCCESS' : '‚ùå FAILED';
            $summary .= "**Treatment $treatmentNum:** {$t['type']}  \n";
            $summary .= "- Status: $status  \n";
            $summary .= "- Changes: {$t['description']}  \n";
            $summary .= "- Risk Score: {$t['risk_score']}/100 ";
            $summary .= $t['risk_score'] < 30 ? '(SAFE)' : ($t['risk_score'] < 60 ? '(MODERATE)' : '(HIGH)');
            $summary .= "  \n\n";
            $treatmentNum++;
        }
    }
    
    $summary .= "**Outcome:** " . ($treatment['success'] ? 'Patient ready for re-testing' : 'Treatment incomplete') . "\n";
    
    return $summary;
}

/**
 * Generate Auditor evaluation summary
 * 
 * @param array $audit Audit results from LLM
 * @return string Markdown summary
 */
function generateAuditorSummary($audit) {
    $summary = "### üìä Auditor Evaluation\n\n";
    
    $llmModel = $audit['llm_model'] ?? 'Gemini 1.5 Pro';
    $score = $audit['score'] ?? 0;
    $verdict = $score >= 5 ? '‚úÖ APPROVED FOR PRODUCTION' : '‚ùå REQUIRES IMPROVEMENT';
    
    $summary .= "**LLM Model:** $llmModel  \n";
    $summary .= "**Evaluation Date:** " . date('F j, Y g:i A') . "  \n";
    $summary .= "**Final Score:** $score/10  \n\n";
    
    // Scoring Breakdown
    $summary .= "#### Scoring Breakdown\n\n";
    $summary .= "| Criterion | Score | Weight | Weighted |\n";
    $summary .= "|-----------|-------|--------|----------|\n";
    
    $criteria = [
        'completeness' => ['name' => 'Test Completeness', 'weight' => 25],
        'methodology' => ['name' => 'Methodology', 'weight' => 25],
        'coverage' => ['name' => 'Coverage', 'weight' => 25],
        'quality' => ['name' => 'Quality Indicators', 'weight' => 25]
    ];
    
    $totalWeighted = 0;
    foreach ($criteria as $key => $info) {
        $criterionScore = $audit['breakdown'][$key] ?? $score;
        $weighted = ($criterionScore * $info['weight']) / 100;
        $totalWeighted += $weighted;
        $summary .= "| {$info['name']} | $criterionScore/10 | {$info['weight']}% | " . number_format($weighted, 2) . " |\n";
    }
    
    $summary .= "| **TOTAL** | **$score/10** | **100%** | **" . number_format($totalWeighted, 2) . "** |\n\n";
    
    // Strengths
    if (isset($audit['strengths']) && is_array($audit['strengths']) && count($audit['strengths']) > 0) {
        $summary .= "#### Strengths Identified\n\n";
        foreach ($audit['strengths'] as $strength) {
            $summary .= "‚úÖ **$strength**  \n";
        }
        $summary .= "\n";
    }
    
    // Gaps
    if (isset($audit['gaps']) && is_array($audit['gaps']) && count($audit['gaps']) > 0) {
        $summary .= "#### Areas for Improvement\n\n";
        foreach ($audit['gaps'] as $gap) {
            $summary .= "‚ö†Ô∏è $gap  \n";
        }
        $summary .= "\n";
    }
    
    // Recommendations
    if (isset($audit['recommendations']) && is_array($audit['recommendations']) && count($audit['recommendations']) > 0) {
        $summary .= "#### Recommendations for Future\n\n";
        foreach ($audit['recommendations'] as $rec) {
            $summary .= "üí° $rec  \n";
        }
        $summary .= "\n";
    }
    
    $summary .= "**Verdict:** $verdict\n";
    
    return $summary;
}

?>
